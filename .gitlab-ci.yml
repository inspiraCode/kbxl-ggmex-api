stages:
  - build
  - deploy

# This file is a template, and might need editing before it works on your project.
build:
  # Official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
  only:
    - main

kbx:
  image: alpine:latest
  stage: deploy
  variables:
    TARGET_DOMAIN_SSH: siafracc.do.inspiracode.com
    TARGET_DOMAIN: kbx.do.siafracc.com
    CONTAINER_NAME: kbx-planning
    DB_HOST: ${DB_HOST_KBX}
    DB_NAME: ${DB_NAME_KBX}
    DB_USER: ${DB_USER_KBX}
    DB_PASSWORD: ${DB_PASSWORD_KBX}
    DB_PORT: ${DB_PORT_KBX}
    API_KEY: ${API_KEY_KBX}
    JWT_SECRET: ${JWT_SECRET_KBX}
    PORT: ${APP_PORT}
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - "which ssh-agent || ( apk --update add openssh-client )"

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    ##
    # - ssh-keyscan "$TARGET_DOMAIN" >> ~/.ssh/known_hosts
    # - chmod 644 ~/.ssh/known_hosts

    ##
    ## Alternatively, assuming you created the SSH_SERVER_HOSTKEYS variable
    ## previously, uncomment the following two lines instead.
    ##
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    ##
    ## You can optionally disable host key checking. Be aware that by adding that
    ## you are suspectible to man-in-the-middle attacks.
    ## WARNING: Use this only with the Docker executor, if you use it with shell
    ## you will overwrite your user's SSH config.
    ##
    #- '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## email.
    ##
    # - git config --global user.email "j.alfredo.pacheco@gmail.com"
    # - git config --global user.name "alfredoPacheco"
  script:
    - |
      ssh root@"$TARGET_DOMAIN_SSH" \
      "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY} && \
      docker pull ${CI_REGISTRY_IMAGE} && \
      (docker stop ${CONTAINER_NAME} || true) && \
      (docker rm ${CONTAINER_NAME} || true) && \
      docker run -d --name ${CONTAINER_NAME} --network my-net \
        -e VIRTUAL_HOST=${TARGET_DOMAIN} -e LETSENCRYPT_HOST=${TARGET_DOMAIN} \
        -e VIRTUAL_PORT=${PORT} \
        -e DB_HOST=${DB_HOST} \
        -e DB_NAME=${DB_NAME} \
        -e DB_USER=${DB_USER} \
        -e DB_PASSWORD=${DB_PASSWORD} \
        -e DB_PORT=${DB_PORT} \
        -e API_KEY=${API_KEY} \
        -e JWT_SECRET=${JWT_SECRET} \
        -e PORT=${PORT} \
        -p ${PORT}:${PORT} \
        ${CI_REGISTRY_IMAGE}"
  environment:
    name: kbx-planning
  when: manual
  only:
    - main
